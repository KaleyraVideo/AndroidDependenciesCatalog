import org.gradle.api.internal.catalog.AbstractExternalDependencyFactory
import org.gradle.api.internal.provider.TransformBackedProvider

plugins {
    id("com.android.application")
    id("org.jetbrains.kotlin.android")
}

android {
    namespace = "com.kaleyra.version_catalog_updater"
    compileSdk = 33

    defaultConfig {
        applicationId "com.kaleyra.version_catalog_updater"
        minSdk 23
        targetSdk 33
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles(getDefaultProguardFile("proguard-android-optimize.txt"), "proguard-rules.pro")
        }
    }
    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = "1.8"
    }
    packagingOptions {
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/LICENSE.md'
        exclude 'META-INF/LICENSE-notice.md'
        exclude 'META-INF/gradle/incremental.annotation.processors'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/ASL2.0'
    }
}

dependencies { dependencyHandler ->

    List<String> skipPackages = Arrays.asList(new String[] { "detekt", "flipper", "awaitility", "test" })

    if ((new File("video-sdk-version-catalog/build/version-catalog/libs.versions.toml").exists())) {
        println("Implementing all libraries defined in videoSdkVersionCatalog...")
        implementAll(dependencyHandler, videoSdkVersionCatalog, skipPackages)
    }

    println()

    if ((new File("video-app-version-catalog/build/version-catalog/libs.versions.toml").exists())) {
        println("Implementing all libraries defined in videoAppVersionCatalog...")
        implementAll(dependencyHandler, videoAppVersionCatalog, skipPackages)
    }
}

private void implementAll(DependencyHandler dependencyHandler, AbstractExternalDependencyFactory factory, List<String> skipList) {
    factory.properties.keySet().forEach {
        if (!(factory.properties[it] instanceof TransformBackedProvider)) return
        TransformBackedProvider transformBackedProvider = (factory.properties[it] as TransformBackedProvider)
        String dependency = transformBackedProvider.get()
        boolean skip = false
        skipList.forEach {if (dependency.contains(it)) skip = true }
        if (skip) return
        println("implementation \"${dependency}\"")
        if (dependency.contains("compose-bom")) dependencyHandler.implementation(dependencyHandler.platform(dependency))
        else dependencyHandler.implementation(dependency) {
            exclude group: 'com.intellij', module: 'annotations'
            exclude group: 'org.jetbrains', module: 'annotations'
        }
    }
}
